cmake_minimum_required(VERSION 3.10)
project(thruster_controller)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)

# Probe a range of Gazebo Sim versions (macOS/Homebrew may differ)
# Include the prefixes you provided: sim9, transport15, msgs12, math9, plugin4
set(GZ_SIM_CANDIDATES 9 10 8 7 6)
set(GZ_TRANSPORT_CANDIDATES 15 14 13 12 11)
set(GZ_MSGS_CANDIDATES 12 11 10 9 8)
set(GZ_MATH_CANDIDATES 9 8 7 6)
set(GZ_PLUGIN_CANDIDATES 4 3 2 1)

set(GZ_SIM_TARGET "")
foreach(ver ${GZ_SIM_CANDIDATES})
  find_package(gz-sim${ver} QUIET)
  if (gz-sim${ver}_FOUND)
    set(GZ_SIM_TARGET gz-sim${ver}::gz-sim${ver})
    message(STATUS "Found ${GZ_SIM_TARGET}")
    break()
  endif()
endforeach()
if (NOT GZ_SIM_TARGET)
  # Fallback to Ignition Gazebo
  set(IGN_GAZEBO_CANDIDATES 6 5 4)
  foreach(ver ${IGN_GAZEBO_CANDIDATES})
    find_package(ignition-gazebo${ver} QUIET)
    if (ignition-gazebo${ver}_FOUND)
      set(GZ_SIM_TARGET ignition-gazebo${ver}::ignition-gazebo${ver})
      message(STATUS "Found ${GZ_SIM_TARGET}")
      break()
    endif()
  endforeach()
endif()
if (NOT GZ_SIM_TARGET)
  message(FATAL_ERROR "Could not find gz-sim (9/10/8/7/6) or ignition-gazebo (6/5/4). Please install Gazebo Sim dev packages.")
endif()

set(GZ_TRANSPORT_TARGET "")
foreach(ver ${GZ_TRANSPORT_CANDIDATES})
  find_package(gz-transport${ver} QUIET)
  if (gz-transport${ver}_FOUND)
    set(GZ_TRANSPORT_TARGET gz-transport${ver}::core)
    message(STATUS "Found gz-transport${ver}")
    break()
  endif()
endforeach()
if (NOT GZ_TRANSPORT_TARGET)
  message(FATAL_ERROR "gz-transport (15/14/13/12/11) not found")
endif()

set(GZ_MSGS_TARGET "")
foreach(ver ${GZ_MSGS_CANDIDATES})
  find_package(gz-msgs${ver} QUIET)
  if (gz-msgs${ver}_FOUND)
    set(GZ_MSGS_TARGET gz-msgs${ver}::gz-msgs${ver})
    message(STATUS "Found gz-msgs${ver}")
    break()
  endif()
endforeach()
if (NOT GZ_MSGS_TARGET)
  message(FATAL_ERROR "gz-msgs (12/11/10/9/8) not found")
endif()

set(GZ_MATH_TARGET "")
foreach(ver ${GZ_MATH_CANDIDATES})
  find_package(gz-math${ver} QUIET)
  if (gz-math${ver}_FOUND)
    set(GZ_MATH_TARGET gz-math${ver}::gz-math${ver})
    message(STATUS "Found gz-math${ver}")
    break()
  endif()
endforeach()
if (NOT GZ_MATH_TARGET)
  message(FATAL_ERROR "gz-math (9/8/7/6) not found")
endif()

set(GZ_PLUGIN_TARGET "")
foreach(ver ${GZ_PLUGIN_CANDIDATES})
  find_package(gz-plugin${ver} QUIET)
  if (gz-plugin${ver}_FOUND)
    set(GZ_PLUGIN_TARGET gz-plugin${ver}::gz-plugin${ver})
    message(STATUS "Found gz-plugin${ver}")
    break()
  endif()
endforeach()
# gz-plugin is optional here; the register header is header-only macro, but link if present

add_library(thruster_controller SHARED src/thruster_controller.cc)
target_link_libraries(thruster_controller PRIVATE ${GZ_SIM_TARGET} ${GZ_TRANSPORT_TARGET} ${GZ_MATH_TARGET} ${GZ_MSGS_TARGET})
if (GZ_PLUGIN_TARGET)
  target_link_libraries(thruster_controller PRIVATE ${GZ_PLUGIN_TARGET})
endif()

install(TARGETS thruster_controller DESTINATION lib)
